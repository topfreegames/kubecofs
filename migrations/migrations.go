// Code generated by go-bindata.
// sources:
// migrations/0001-CreateUserTable.sql
// migrations/0002-CreateClusterTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreateusertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xce\xc1\x6e\xd3\x30\x1c\x06\xf0\xbb\x9f\xe2\xd3\x4e\xad\x84\x6b\x98\x34\x0e\x1d\x42\x94\xcd\x05\x8b\x34\x45\xad\xa3\x6d\x5c\x90\xe7\xfc\x97\x58\x4b\x62\xcb\x76\xa8\xf6\x48\xbc\x06\x4f\x86\xb2\x8e\x5e\x38\xec\x68\xff\xbf\xdf\xa7\x8f\x73\xf4\x4f\x29\x1b\xfb\xc8\xad\x1f\x72\xf4\x5d\x47\x11\x26\x38\xc6\x39\xda\x9c\x43\x5a\x0a\xd1\xb8\xdc\x8e\xf7\x0b\xeb\x7b\x91\x7d\x78\x88\x44\x8d\xe9\x29\x89\xff\x25\xe3\x7c\x82\x85\xb3\x34\x24\xaa\x31\x0e\x35\x45\xe4\x96\xb0\x51\x1a\xdd\xf1\x7b\xf9\xaf\x7b\x29\xc4\xe1\x70\x58\xf8\x40\x43\xf2\x63\xb4\xb4\xf0\xb1\x11\x2f\xa9\x24\x7a\x97\xf9\xcb\x63\x12\x57\x3e\x3c\x45\xd7\xb4\x19\x7f\x7e\xe3\xfc\xed\xbb\xf7\xd0\x3e\x60\x1d\x89\xf0\x65\x9a\x83\x0f\xf7\xc6\x3e\xd2\x50\x7f\xca\x0f\x8d\xf5\xd3\xdc\x8f\x8c\x5d\xed\xe4\x4a\x4b\xc8\x5b\x2d\xcb\xbd\xda\x96\x50\x6b\x94\x5b\x0d\x79\xab\xf6\x7a\x8f\xb3\x71\x74\x35\xf7\x29\x85\xb3\xcb\x53\x58\xaf\x3e\x17\x12\x63\xa2\x98\x30\x63\x00\xe0\x6a\x54\x95\xba\xc6\xf7\x9d\xda\xac\x76\x77\xf8\x26\xef\xde\x3c\x1f\xa8\x37\xae\xc3\x2f\x13\x6d\x6b\xe2\xec\xfc\xe2\x62\xfe\xdc\x5e\x56\x45\x71\x0c\xd8\x48\x26\x53\xfd\xd3\x64\x64\xd7\x53\xca\xa6\x0f\xb8\x51\xfa\x2b\xb4\xda\x48\xfc\xd8\x96\xf2\x24\x70\x2d\xd7\xab\xaa\xd0\x28\xb7\x37\xb3\xf9\xd1\x8f\xa1\x7e\xdd\x57\x45\xc1\xe6\x97\x8c\xfd\x0d\x00\x00\xff\xff\x6a\x34\x43\x05\xce\x01\x00\x00")

func migrations0001CreateusertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreateusertableSql,
		"migrations/0001-CreateUserTable.sql",
	)
}

func migrations0001CreateusertableSql() (*asset, error) {
	bytes, err := migrations0001CreateusertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateUserTable.sql", size: 462, mode: os.FileMode(420), modTime: time.Unix(1491410967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateclustertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8e\xd1\x6e\xd3\x30\x18\x85\xef\xf3\x14\x47\xbb\x59\x2b\x91\x06\x26\xc6\x45\x86\x10\xdd\xe6\x42\x20\x4d\xa0\x75\xb4\x8e\x9b\xca\x73\xfe\x25\xd6\x92\xd8\xb2\x9d\x56\x15\xe2\x81\x78\x0d\x9e\x0c\xa5\x1d\xbd\xa0\x37\xbb\xb4\xcf\xf9\xbe\xff\x84\x21\xda\x9d\xf3\x42\x3e\x85\x52\x77\xde\xea\xa6\x21\x0b\x61\x54\x10\x86\xa8\xbd\x37\x2e\x8e\xa2\x4a\xf9\xba\x7f\x98\x48\xdd\x46\x5e\x9b\x47\x4b\x54\x89\x96\x5c\x74\x4a\x06\x61\x38\x80\xa9\x92\xd4\x39\x2a\xd1\x77\x25\x59\xf8\x9a\x30\x4f\x38\x9a\xc3\x77\xfc\xcf\x1d\x47\xd1\x76\xbb\x9d\x68\x43\x9d\xd3\xbd\x95\x34\xd1\xb6\x8a\x9e\x5b\x2e\x6a\x95\x0f\x9f\x1f\x03\x71\xa3\xcd\xce\xaa\xaa\xf6\xf8\xf3\x1b\x17\xaf\xdf\xbc\x03\xd7\x06\x33\x4b\x84\x4f\xc3\x1c\xbc\x7f\x10\xf2\x89\xba\xf2\xa3\x7f\xac\xa4\x1e\xe6\x7e\x08\x82\x9b\x05\x9b\x72\x06\xb6\xe2\x2c\x5b\x26\x79\x86\x64\x86\x2c\xe7\x60\xab\x64\xc9\x97\x38\xeb\x7b\x55\x86\xda\x39\x73\x76\x75\x2c\xf3\xe9\x75\xca\x20\x9b\xde\x79\xb2\x0e\xa3\x00\x00\x54\x89\xa2\x48\x6e\xf1\x6d\x91\xcc\xa7\x8b\x7b\x7c\x65\xf7\xb8\x65\xb3\x69\x91\x72\x0c\x92\x75\x45\x1d\x59\xe1\x69\xbd\x79\x3b\x1a\xbf\xda\x33\x9d\x68\x09\x1b\x61\x65\x2d\xec\xe8\xe2\xf2\x72\x8c\x22\x4b\xbe\x17\x6c\xbf\x20\x2b\xd2\xf4\x50\x13\xc6\x38\x7c\x59\xe6\xd9\xf5\x31\x38\xaa\xcf\x7f\xfe\x3a\x8f\xe3\x7d\x78\x28\x3b\xb2\x1b\x25\xe9\xe5\xc0\x4e\xb4\x0d\x38\x5b\xf1\xff\xae\x4a\x4b\xc2\x53\xb9\x16\x1e\x5e\xb5\xe4\xbc\x68\x0d\xee\x12\xfe\x19\x3c\x99\x33\xfc\xc8\x33\x76\x6a\xcf\xf2\xbb\xd1\x38\x18\x5f\x05\x7f\x03\x00\x00\xff\xff\x76\xbc\x99\x09\x39\x02\x00\x00")

func migrations0002CreateclustertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateclustertableSql,
		"migrations/0002-CreateClusterTable.sql",
	)
}

func migrations0002CreateclustertableSql() (*asset, error) {
	bytes, err := migrations0002CreateclustertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateClusterTable.sql", size: 569, mode: os.FileMode(420), modTime: time.Unix(1491483520, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateUserTable.sql": migrations0001CreateusertableSql,
	"migrations/0002-CreateClusterTable.sql": migrations0002CreateclustertableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateUserTable.sql": &bintree{migrations0001CreateusertableSql, map[string]*bintree{}},
		"0002-CreateClusterTable.sql": &bintree{migrations0002CreateclustertableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

