// Code generated by go-bindata.
// sources:
// migrations/0001-CreateUserTable.sql
// migrations/0002-CreateClusterTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreateusertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xce\xc1\x6e\xd3\x30\x1c\x06\xf0\xbb\x9f\xe2\xd3\x4e\xad\x84\x6b\x98\x34\x0e\x1d\x42\x94\xcd\x05\x8b\x34\x45\xad\xa3\x6d\x5c\x90\xe7\xfc\x97\x58\x4b\x62\xcb\x76\xa8\xf6\x48\xbc\x06\x4f\x86\xb2\x8e\x5e\x38\xec\x68\xff\xbf\xdf\xa7\x8f\x73\xf4\x4f\x29\x1b\xfb\xc8\xad\x1f\x72\xf4\x5d\x47\x11\x26\x38\xc6\x39\xda\x9c\x43\x5a\x0a\xd1\xb8\xdc\x8e\xf7\x0b\xeb\x7b\x91\x7d\x78\x88\x44\x8d\xe9\x29\x89\xff\x25\xe3\x7c\x82\x85\xb3\x34\x24\xaa\x31\x0e\x35\x45\xe4\x96\xb0\x51\x1a\xdd\xf1\x7b\xf9\xaf\x7b\x29\xc4\xe1\x70\x58\xf8\x40\x43\xf2\x63\xb4\xb4\xf0\xb1\x11\x2f\xa9\x24\x7a\x97\xf9\xcb\x63\x12\x57\x3e\x3c\x45\xd7\xb4\x19\x7f\x7e\xe3\xfc\xed\xbb\xf7\xd0\x3e\x60\x1d\x89\xf0\x65\x9a\x83\x0f\xf7\xc6\x3e\xd2\x50\x7f\xca\x0f\x8d\xf5\xd3\xdc\x8f\x8c\x5d\xed\xe4\x4a\x4b\xc8\x5b\x2d\xcb\xbd\xda\x96\x50\x6b\x94\x5b\x0d\x79\xab\xf6\x7a\x8f\xb3\x71\x74\x35\xf7\x29\x85\xb3\xcb\x53\x58\xaf\x3e\x17\x12\x63\xa2\x98\x30\x63\x00\xe0\x6a\x54\x95\xba\xc6\xf7\x9d\xda\xac\x76\x77\xf8\x26\xef\xde\x3c\x1f\xa8\x37\xae\xc3\x2f\x13\x6d\x6b\xe2\xec\xfc\xe2\x62\xfe\xdc\x5e\x56\x45\x71\x0c\xd8\x48\x26\x53\xfd\xd3\x64\x64\xd7\x53\xca\xa6\x0f\xb8\x51\xfa\x2b\xb4\xda\x48\xfc\xd8\x96\xf2\x24\x70\x2d\xd7\xab\xaa\xd0\x28\xb7\x37\xb3\xf9\xd1\x8f\xa1\x7e\xdd\x57\x45\xc1\xe6\x97\x8c\xfd\x0d\x00\x00\xff\xff\x6a\x34\x43\x05\xce\x01\x00\x00")

func migrations0001CreateusertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreateusertableSql,
		"migrations/0001-CreateUserTable.sql",
	)
}

func migrations0001CreateusertableSql() (*asset, error) {
	bytes, err := migrations0001CreateusertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateUserTable.sql", size: 462, mode: os.FileMode(420), modTime: time.Unix(1491410967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateclustertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\xd1\x6e\xd3\x30\x14\x86\xef\xf3\x14\xbf\x76\xd5\x4a\xb8\x81\x89\x71\xd1\x21\x44\xd9\x5c\xb0\x48\x53\x68\x1d\xad\xe3\xa6\xf2\x9c\xb3\x24\x5a\x12\x5b\xf6\xc9\xaa\x3e\x12\xaf\xc1\x93\xa1\x6c\xa3\x48\x70\x79\x8e\xfe\xef\xd3\x27\x04\xba\x63\x64\x63\x1f\x84\x75\x3d\x07\xd7\xb6\x14\x60\x7c\x93\x08\x81\x9a\xd9\xc7\x79\x9a\x56\x0d\xd7\xc3\xdd\xcc\xba\x2e\x65\xe7\xef\x03\x51\x65\x3a\x8a\xe9\xff\x64\x22\xc4\x08\x66\x8d\xa5\x3e\x52\x89\xa1\x2f\x29\x80\x6b\xc2\x4a\x69\xb4\xcf\xef\xf9\x1f\xf7\x3c\x4d\x0f\x87\xc3\xcc\x79\xea\xa3\x1b\x82\xa5\x99\x0b\x55\xfa\xb2\x8a\x69\xd7\xb0\x78\x39\x46\xe2\xca\xf9\x63\x68\xaa\x9a\xf1\xeb\x27\xce\x5f\xbf\x79\x07\xed\x3c\x96\x81\x08\x9f\xc7\x1c\xbc\xbf\x33\xf6\x81\xfa\xf2\x23\xdf\x57\xd6\x8d\xb9\x1f\x92\xe4\x6a\x23\x17\x5a\x42\xee\xb4\xcc\xb7\x6a\x9d\x43\x2d\x91\xaf\x35\xe4\x4e\x6d\xf5\x16\x67\xc3\xd0\x94\xc2\xc5\xe8\xcf\x2e\x4f\x63\xbd\xf8\x94\x49\xd8\x76\x88\x4c\x21\x62\x92\x00\x40\x53\xa2\x28\xd4\x35\xbe\x6d\xd4\x6a\xb1\xb9\xc5\x57\x79\x8b\x6b\xb9\x5c\x14\x99\xc6\x28\xd9\x57\xd4\x53\x30\x4c\xfb\xc7\xb7\x93\xe9\xab\x27\xa6\x37\x1d\xe1\xd1\x04\x5b\x9b\x30\x39\xbf\xb8\x98\xa2\xc8\xd5\xf7\x42\x3e\x15\xe4\x45\x96\x3d\xcf\x8e\xa6\x6b\xa1\xe5\x4e\xff\xf3\xb7\x81\x0c\x53\xb9\x37\x0c\x6e\x3a\x8a\x6c\x3a\x8f\x1b\xa5\xbf\x40\xab\x95\xc4\x8f\x75\xfe\xd7\x74\x6a\xc9\xd7\x37\x93\x69\x32\xbd\x4c\x7e\x07\x00\x00\xff\xff\xa4\x60\x8b\x09\xdb\x01\x00\x00")

func migrations0002CreateclustertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateclustertableSql,
		"migrations/0002-CreateClusterTable.sql",
	)
}

func migrations0002CreateclustertableSql() (*asset, error) {
	bytes, err := migrations0002CreateclustertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateClusterTable.sql", size: 475, mode: os.FileMode(420), modTime: time.Unix(1491484575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateUserTable.sql": migrations0001CreateusertableSql,
	"migrations/0002-CreateClusterTable.sql": migrations0002CreateclustertableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateUserTable.sql": &bintree{migrations0001CreateusertableSql, map[string]*bintree{}},
		"0002-CreateClusterTable.sql": &bintree{migrations0002CreateclustertableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

