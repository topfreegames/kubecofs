// Code generated by go-bindata.
// sources:
// migrations/0001-CreateUserTable.sql
// migrations/0002-CreateClusterTable.sql
// migrations/0003-AlterUserTableColumnKeyAccessToken.sql
// migrations/0004-AlterTableUsersExpiryWithTimestamp.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreateusertableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xd1\x6e\xd3\x30\x14\x86\xef\xfd\x14\xe7\x6e\x89\x84\x6b\x98\x34\x2e\xca\x34\x51\x42\xc6\x22\xb2\x54\x20\x47\x93\xb8\xa9\x3c\xe7\x34\xb1\x9a\xc4\x96\x7d\x42\xc9\x23\xf1\x1a\x3c\x19\x4a\x5b\x50\x22\x6e\xd8\xa5\xed\xff\xfb\xfc\x71\x0e\xdd\x18\x48\xe9\x03\xd7\xb6\x27\x6f\xdb\x16\x3d\x28\x67\x18\xe7\xd0\x10\xb9\xb0\x16\xa2\x36\xd4\x0c\xcf\x2b\x6d\x3b\x41\xd6\xed\x3d\x62\xad\x3a\x0c\xe2\x5f\x92\x71\x3e\x81\xb9\xd1\xd8\x07\xac\x60\xe8\x2b\xf4\x40\x0d\xc2\x63\x26\xa1\x3d\x5f\xaf\xff\xb8\xd7\x42\x1c\x8f\xc7\x95\x75\xd8\x07\x3b\x78\x8d\x2b\xeb\x6b\x71\x59\x05\xd1\x19\xe2\x97\xc3\x44\x24\xd6\x8d\xde\xd4\x0d\xc1\xaf\x9f\x70\xfd\xfa\xcd\x5b\x90\xd6\xc1\xbd\x47\x84\x4f\x53\x0e\xdc\x3e\x2b\x7d\xc0\xbe\x7a\x4f\xfb\x5a\xdb\x29\xf7\x8e\xb1\xe4\x6b\xba\x91\x29\xc8\xcd\x87\x3c\x85\x21\xa0\x0f\x10\x31\x00\x00\xa5\x35\x86\xb0\x23\x7b\xc0\x1e\xbe\x2b\xaf\x1b\xe5\xa3\xeb\x9b\x9b\x18\xca\x22\xfb\x52\xa6\x50\x6c\x25\x14\x65\x9e\x43\xf2\x90\x26\x9f\x21\x5a\x00\xb7\x77\x70\x75\x15\xbf\x3a\x99\x3c\xee\x3d\x86\xe6\x05\xaa\x25\x31\x77\xe1\x0f\x67\xfc\x08\x64\x3a\x0c\xa4\x3a\xf7\x17\x3d\x3f\x9f\x80\x1d\x8d\x0e\x97\xff\x2c\x57\xd8\x29\xd3\xfe\x57\xc8\x79\x39\x0f\xd0\x1e\x15\x61\xb5\x53\x34\x8b\x78\xca\xe4\x03\xc8\xec\x31\x85\x6f\xdb\x62\x66\xf9\x98\xde\x6f\xca\x5c\x42\xb1\x7d\x8a\x62\x16\xbf\x63\xec\x77\x00\x00\x00\xff\xff\x56\xdf\xd9\x99\x50\x02\x00\x00")

func migrations0001CreateusertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreateusertableSql,
		"migrations/0001-CreateUserTable.sql",
	)
}

func migrations0001CreateusertableSql() (*asset, error) {
	bytes, err := migrations0001CreateusertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateUserTable.sql", size: 592, mode: os.FileMode(420), modTime: time.Unix(1496080064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateclustertableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xd1\x6e\xd3\x30\x14\x86\xef\xf3\x14\xbf\x76\xd5\x4a\xb8\x81\x89\x71\xd1\x21\x44\xd9\x5c\xb0\x48\x53\x68\x1d\xad\xe3\xa6\xf2\x9c\xb3\x24\x5a\x12\x5b\xf6\xc9\xaa\x3e\x12\xaf\xc1\x93\xa1\x6c\xa3\x48\x70\x79\x8e\xfe\xef\xd3\x27\x04\xba\x63\x64\x63\x1f\x84\x75\x3d\x07\xd7\xb6\x14\x60\x7c\x93\x08\x81\x9a\xd9\xc7\x79\x9a\x56\x0d\xd7\xc3\xdd\xcc\xba\x2e\x65\xe7\xef\x03\x51\x65\x3a\x8a\xe9\xff\x64\x22\xc4\x08\x66\x8d\xa5\x3e\x52\x89\xa1\x2f\x29\x80\x6b\xc2\x4a\x69\xb4\xcf\xef\xf9\x1f\xf7\x3c\x4d\x0f\x87\xc3\xcc\x79\xea\xa3\x1b\x82\xa5\x99\x0b\x55\xfa\xb2\x8a\x69\xd7\xb0\x78\x39\x46\xe2\xca\xf9\x63\x68\xaa\x9a\xf1\xeb\x27\xce\x5f\xbf\x79\x07\xed\x3c\x96\x81\x08\x9f\xc7\x1c\xbc\xbf\x33\xf6\x81\xfa\xf2\x23\xdf\x57\xd6\x8d\xb9\x1f\x92\xe4\x6a\x23\x17\x5a\x42\xee\xb4\xcc\xb7\x6a\x9d\x43\x2d\x91\xaf\x35\xe4\x4e\x6d\xf5\x16\x67\xc3\xd0\x94\xc2\xc5\xe8\xcf\x2e\x4f\x63\xbd\xf8\x94\x49\xd8\x76\x88\x4c\x21\x62\x92\x00\x40\x53\xa2\x28\xd4\x35\xbe\x6d\xd4\x6a\xb1\xb9\xc5\x57\x79\x8b\x6b\xb9\x5c\x14\x99\xc6\x28\xd9\x57\xd4\x53\x30\x4c\xfb\xc7\xb7\x93\xe9\xab\x27\xa6\x37\x1d\xe1\xd1\x04\x5b\x9b\x30\x39\xbf\xb8\x98\xa2\xc8\xd5\xf7\x42\x3e\x15\xe4\x45\x96\x3d\xcf\x8e\xa6\x6b\xa1\xe5\x4e\xff\xf3\xb7\x81\x0c\x53\xb9\x37\x0c\x6e\x3a\x8a\x6c\x3a\x8f\x1b\xa5\xbf\x40\xab\x95\xc4\x8f\x75\xfe\xd7\x74\x6a\xc9\xd7\x37\x93\x69\x32\xbd\x4c\x7e\x07\x00\x00\xff\xff\xa4\x60\x8b\x09\xdb\x01\x00\x00")

func migrations0002CreateclustertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateclustertableSql,
		"migrations/0002-CreateClusterTable.sql",
	)
}

func migrations0002CreateclustertableSql() (*asset, error) {
	bytes, err := migrations0002CreateclustertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateClusterTable.sql", size: 475, mode: os.FileMode(420), modTime: time.Unix(1492030677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003AlterusertablecolumnkeyaccesstokenSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xc1\x6e\xaa\x40\x14\x86\xf7\x3c\xc5\xd9\xa1\x8b\x71\xee\x35\xf1\x2e\xc4\x6b\x4a\x61\x6c\x4d\x11\xac\x1d\x92\xee\xcc\x38\x1e\x81\x20\x0c\x99\x19\x6a\x7c\xa4\xbe\x46\x9f\xac\xc1\x6a\xd2\x84\x76\x79\xfe\x9c\xff\xff\x3e\x42\xa0\x3a\x1b\x2b\x64\x49\xa4\xaa\xad\x56\xc7\x23\x6a\x10\x4d\xe1\x10\x02\xb9\xb5\x8d\x99\x52\x9a\x15\x36\x6f\x77\x23\xa9\x2a\x6a\x55\x73\xd0\x88\x99\xa8\xd0\xd0\x7e\xd3\x21\xa4\x2b\x46\x85\xc4\xda\xe0\x1e\xda\x7a\x8f\x1a\x6c\x8e\xb0\x5a\x72\x38\x7e\xc5\xd3\xdb\xf6\x94\xd2\xd3\xe9\x34\x52\x0d\xd6\x46\xb5\x5a\xe2\x48\xe9\x8c\x5e\xbf\x0c\xad\x0a\x4b\xae\x47\xd7\x08\x54\x73\xd6\x45\x96\x5b\xf8\x78\x87\xf1\x9f\xbf\xff\x80\xab\x06\x16\x1a\x11\x1e\x3a\x1d\x98\xed\x84\x2c\xb1\xde\xdf\xd9\x43\x26\x55\xa7\x3b\x77\x1c\x3f\xe2\x6c\x03\xdc\xbf\x8f\x18\xb4\x06\xb5\x01\x3f\x0c\x21\x48\xa2\x74\x15\x43\x89\xe7\xad\x90\x12\x8d\xd9\x5a\x55\x62\x0d\x6f\x42\xcb\x5c\xe8\xc1\x78\x32\x19\x42\x9c\x70\x88\xd3\x28\x82\xe0\x91\x05\x4f\x30\xe8\x7d\xcf\xe6\xe0\xba\x43\x08\xd9\xc2\x4f\x23\x0e\xee\x25\x75\x3d\x27\x5d\x87\x3e\xbf\xe1\x5e\x18\xef\x73\xfe\xc3\xf7\xd3\xfb\xc9\xf2\x92\xfc\xe6\x19\x6e\x92\xf5\x8d\xeb\x39\xc1\x86\x75\xbc\x34\x5e\x3e\xa7\x0c\x96\x71\xc8\x5e\x21\x89\xaf\x43\x3d\xed\xa1\xe7\x7c\x06\x00\x00\xff\xff\xee\x33\x37\xd1\xf6\x01\x00\x00")

func migrations0003AlterusertablecolumnkeyaccesstokenSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003AlterusertablecolumnkeyaccesstokenSql,
		"migrations/0003-AlterUserTableColumnKeyAccessToken.sql",
	)
}

func migrations0003AlterusertablecolumnkeyaccesstokenSql() (*asset, error) {
	bytes, err := migrations0003AlterusertablecolumnkeyaccesstokenSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-AlterUserTableColumnKeyAccessToken.sql", size: 502, mode: os.FileMode(420), modTime: time.Unix(1496093329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0004AltertableusersexpirywithtimestampSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x4e\x83\x40\x14\x86\xf7\x9c\xe2\xbf\xc0\x30\xea\xc2\x05\x1a\x23\x36\xa8\x24\xd0\x36\x3a\xc6\xe8\x8e\x0e\xaf\x30\x29\x30\x93\x99\x47\x90\x23\x79\x0d\x4f\x66\xb0\x75\xd5\xe5\xff\xe5\x7d\x2f\x9f\x10\xe8\xe7\xc0\x95\x3e\x08\x6d\x07\xf6\xb6\xeb\xc8\xa3\x72\x26\x12\x02\x2d\xb3\x0b\x89\x94\x8d\xe1\x76\xdc\xc5\xda\xf6\x92\xad\xdb\x7b\xa2\xa6\xea\x29\xc8\x73\x33\x12\x62\x11\x0b\xa3\x69\x08\x54\x63\x1c\x6a\xf2\xe0\x96\x50\xe6\x0a\xdd\x11\x27\xff\xbf\x13\x29\xa7\x69\x8a\xad\xa3\x21\xd8\xd1\x6b\x8a\xad\x6f\xe4\xe9\x2a\xc8\xde\xb0\x38\x8d\xc5\x58\x59\x37\x7b\xd3\xb4\x8c\x9f\x6f\x5c\x5d\x5c\x5e\x43\x59\x87\x47\x4f\x84\xa7\x25\x07\xb7\xbb\x4a\x1f\x68\xa8\xef\x79\xdf\x68\xbb\xe4\xde\x45\x51\x5a\xa8\xec\x05\x2a\x7d\x28\x32\x8c\x81\x7c\xc0\x91\xac\x36\xc5\x5b\xb9\x06\x7d\x39\xe3\x67\xa8\x8f\x6d\x06\x95\x97\xd9\xab\x4a\xcb\x2d\xde\x73\xf5\xfc\x37\xf1\xb9\x59\x67\x37\xd1\x6f\x00\x00\x00\xff\xff\x25\xe2\x3e\xa3\x26\x01\x00\x00")

func migrations0004AltertableusersexpirywithtimestampSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0004AltertableusersexpirywithtimestampSql,
		"migrations/0004-AlterTableUsersExpiryWithTimestamp.sql",
	)
}

func migrations0004AltertableusersexpirywithtimestampSql() (*asset, error) {
	bytes, err := migrations0004AltertableusersexpirywithtimestampSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0004-AlterTableUsersExpiryWithTimestamp.sql", size: 294, mode: os.FileMode(420), modTime: time.Unix(1496113159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateUserTable.sql": migrations0001CreateusertableSql,
	"migrations/0002-CreateClusterTable.sql": migrations0002CreateclustertableSql,
	"migrations/0003-AlterUserTableColumnKeyAccessToken.sql": migrations0003AlterusertablecolumnkeyaccesstokenSql,
	"migrations/0004-AlterTableUsersExpiryWithTimestamp.sql": migrations0004AltertableusersexpirywithtimestampSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateUserTable.sql": &bintree{migrations0001CreateusertableSql, map[string]*bintree{}},
		"0002-CreateClusterTable.sql": &bintree{migrations0002CreateclustertableSql, map[string]*bintree{}},
		"0003-AlterUserTableColumnKeyAccessToken.sql": &bintree{migrations0003AlterusertablecolumnkeyaccesstokenSql, map[string]*bintree{}},
		"0004-AlterTableUsersExpiryWithTimestamp.sql": &bintree{migrations0004AltertableusersexpirywithtimestampSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

