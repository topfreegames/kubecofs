// Code generated by go-bindata.
// sources:
// migrations/0001-CreateUserTable.sql
// migrations/0002-CreateClusterTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreateusertableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xcd\x6e\xd4\x30\x14\x46\xf7\x7e\x8a\xbb\xeb\x8c\x84\xc7\x50\xa9\x2c\x86\xaa\x62\x08\x29\x8d\x48\x33\x02\x39\xaa\xc4\x26\x72\x9d\x3b\x89\x95\x1f\x5b\xf6\x0d\x43\x1e\x89\xd7\xe0\xc9\x50\x3a\x05\x25\xea\xa6\xb3\xb4\xfd\x9d\xe3\xc3\x39\x74\x63\x20\xa5\x1b\xae\x6d\x4f\xde\xb6\x2d\x7a\x50\xce\x30\xce\xa1\x26\x72\x61\x2b\x44\x65\xa8\x1e\x1e\x37\xda\x76\x82\xac\x3b\x78\xc4\x4a\x75\x18\xc4\x4b\x92\x71\x3e\x81\xa9\xd1\xd8\x07\x2c\x61\xe8\x4b\xf4\x40\x35\xc2\x7d\x22\xa1\x3d\x5d\x6f\xff\xb9\xb7\x42\x1c\x8f\xc7\x8d\x75\xd8\x07\x3b\x78\x8d\x1b\xeb\x2b\xf1\xbc\x0a\xa2\x33\xc4\x9f\x0f\x13\x11\x59\x37\x7a\x53\xd5\x04\x7f\x7e\xc3\xe5\xdb\x77\xef\x41\x5a\x07\xb7\x1e\x11\xbe\x4c\x39\x70\xfd\xa8\x74\x83\x7d\xf9\x91\x0e\x95\xb6\x53\xee\x0d\x63\xd1\xf7\x78\x27\x63\x90\xbb\x4f\x69\x0c\x43\x40\x1f\x60\xc5\x00\x00\x94\xd6\x18\x42\x41\xb6\xc1\x1e\x7e\x2a\xaf\x6b\xe5\x57\x97\x57\x57\x6b\xc8\xb3\xe4\x5b\x1e\x43\xb6\x97\x90\xe5\x69\x0a\xd1\x5d\x1c\x7d\x85\xd5\x02\xb8\xbe\x81\x8b\x8b\xf5\x9b\x27\x53\x83\x63\x71\xb6\xed\x05\x34\x37\x7a\x3c\x78\x0c\xf5\x19\xba\x25\x31\x77\xe1\x2f\x67\xfc\x08\x64\x3a\x0c\xa4\x3a\xf7\x1f\x3d\x3d\x3f\x01\x05\x8d\x0e\x97\xff\x2c\x57\xd8\x29\xd3\xbe\x2a\xe4\xb4\x9c\x07\x68\x8f\x8a\xb0\x2c\x14\xcd\x22\x1e\x12\x79\x07\x32\xb9\x8f\xe1\xc7\x3e\x9b\x59\x3e\xc7\xb7\xbb\x3c\x95\x90\xed\x1f\x56\x6b\xb6\xfe\xc0\xd8\xdf\x00\x00\x00\xff\xff\xb9\x74\x4c\x21\xa2\x02\x00\x00")

func migrations0001CreateusertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreateusertableSql,
		"migrations/0001-CreateUserTable.sql",
	)
}

func migrations0001CreateusertableSql() (*asset, error) {
	bytes, err := migrations0001CreateusertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateUserTable.sql", size: 674, mode: os.FileMode(420), modTime: time.Unix(1495985145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateclustertableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xd1\x6e\xd3\x30\x14\x86\xef\xf3\x14\xbf\x76\xd5\x4a\xb8\x81\x89\x71\xd1\x21\x44\xd9\x5c\xb0\x48\x53\x68\x1d\xad\xe3\xa6\xf2\x9c\xb3\x24\x5a\x12\x5b\xf6\xc9\xaa\x3e\x12\xaf\xc1\x93\xa1\x6c\xa3\x48\x70\x79\x8e\xfe\xef\xd3\x27\x04\xba\x63\x64\x63\x1f\x84\x75\x3d\x07\xd7\xb6\x14\x60\x7c\x93\x08\x81\x9a\xd9\xc7\x79\x9a\x56\x0d\xd7\xc3\xdd\xcc\xba\x2e\x65\xe7\xef\x03\x51\x65\x3a\x8a\xe9\xff\x64\x22\xc4\x08\x66\x8d\xa5\x3e\x52\x89\xa1\x2f\x29\x80\x6b\xc2\x4a\x69\xb4\xcf\xef\xf9\x1f\xf7\x3c\x4d\x0f\x87\xc3\xcc\x79\xea\xa3\x1b\x82\xa5\x99\x0b\x55\xfa\xb2\x8a\x69\xd7\xb0\x78\x39\x46\xe2\xca\xf9\x63\x68\xaa\x9a\xf1\xeb\x27\xce\x5f\xbf\x79\x07\xed\x3c\x96\x81\x08\x9f\xc7\x1c\xbc\xbf\x33\xf6\x81\xfa\xf2\x23\xdf\x57\xd6\x8d\xb9\x1f\x92\xe4\x6a\x23\x17\x5a\x42\xee\xb4\xcc\xb7\x6a\x9d\x43\x2d\x91\xaf\x35\xe4\x4e\x6d\xf5\x16\x67\xc3\xd0\x94\xc2\xc5\xe8\xcf\x2e\x4f\x63\xbd\xf8\x94\x49\xd8\x76\x88\x4c\x21\x62\x92\x00\x40\x53\xa2\x28\xd4\x35\xbe\x6d\xd4\x6a\xb1\xb9\xc5\x57\x79\x8b\x6b\xb9\x5c\x14\x99\xc6\x28\xd9\x57\xd4\x53\x30\x4c\xfb\xc7\xb7\x93\xe9\xab\x27\xa6\x37\x1d\xe1\xd1\x04\x5b\x9b\x30\x39\xbf\xb8\x98\xa2\xc8\xd5\xf7\x42\x3e\x15\xe4\x45\x96\x3d\xcf\x8e\xa6\x6b\xa1\xe5\x4e\xff\xf3\xb7\x81\x0c\x53\xb9\x37\x0c\x6e\x3a\x8a\x6c\x3a\x8f\x1b\xa5\xbf\x40\xab\x95\xc4\x8f\x75\xfe\xd7\x74\x6a\xc9\xd7\x37\x93\x69\x32\xbd\x4c\x7e\x07\x00\x00\xff\xff\xa4\x60\x8b\x09\xdb\x01\x00\x00")

func migrations0002CreateclustertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateclustertableSql,
		"migrations/0002-CreateClusterTable.sql",
	)
}

func migrations0002CreateclustertableSql() (*asset, error) {
	bytes, err := migrations0002CreateclustertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateClusterTable.sql", size: 475, mode: os.FileMode(420), modTime: time.Unix(1492030677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateUserTable.sql": migrations0001CreateusertableSql,
	"migrations/0002-CreateClusterTable.sql": migrations0002CreateclustertableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateUserTable.sql": &bintree{migrations0001CreateusertableSql, map[string]*bintree{}},
		"0002-CreateClusterTable.sql": &bintree{migrations0002CreateclustertableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

